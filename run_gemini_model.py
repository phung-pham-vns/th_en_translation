import os
import json
import time
import argparse
from dotenv import load_dotenv
from google import genai
from google.genai import types


# Load .env and initialize Gemini client
def setup_gemini_client() -> genai.Client:
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise EnvironmentError("GOOGLE_API_KEY is not set in environment.")
    return genai.Client(api_key=api_key)


# Fixed translation terms
system_prompt = (
    "You are a professional translation expert specializing in Thai-to-English translation.\n\n"
    "Your task is to translate Thai queries into clear, natural, and grammatically correct English, while fully preserving the original meaning, tone, and intent.\n"
    "Maintain the original format ‚Äî especially if the input is a question ‚Äî and ensure contextual accuracy.\n\n"
    "You must strictly preserve the following fixed Thai terms by translating them exactly as shown:\n\n"
    "{\n"
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ó‡∏á‡∏¢‡∏≠‡∏î": "Initial Bud Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏≤‡∏á‡∏õla-‡πÉ‡∏ö‡∏Ñ‡∏•‡∏µ‡πà": "Fishbone-Curled Leaf Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏ö‡πÄ‡∏û‡∏™‡∏•‡∏≤‡∏î‡∏≠‡πà‡∏≠‡∏ô": "Initial Semi-Mature Leaf Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏ö‡πÄ‡∏û‡∏™‡∏•‡∏≤‡∏î": "Semi-Mature Leaf Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏ö‡πÅ‡∏Å‡πà": "Mature Leaf Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Ç‡πà‡∏õ‡∏•‡∏≤": "Early Bud Initiation Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡∏≤‡∏õ‡∏π": "Small Bud Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏ï‡∏µ‡∏ô‡∏´‡∏ô‡∏π": "Bud Elongation Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏£‡∏∞‡∏î‡∏∏‡∏°": "Button Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡∏û‡∏ß‡∏á": "Enlarged Bud Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏±‡∏ß‡∏Å‡∏≥‡πÑ‡∏•": "Pre-Flowering Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß": "Flower Maturity Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡∏≠‡∏Å‡∏ö‡∏≤‡∏ô": "Flowering Stage (Anthesis)",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏≤‡∏á‡πÅ‡∏¢‡πâ‡πÑ‡∏´‡∏°‡πâ": "Post-Anthesis / Early Fruit Set Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà": "Small Fruit Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡∏ô‡∏°": "Medium Fruit Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏π": "Maturing Fruit Stage",\n'
    '  "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏Å‡πà-‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß": "Harvest Maturity Stage",\n'
    '  "‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤ ‡πÇ‡∏Ñ‡∏ô‡πÄ‡∏ô‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÄ‡∏ô‡πà‡∏≤": "Root rot, Foot rot, and Fruit rot",\n'
    '  "‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™": "Anthracnose",\n'
    '  "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÄ‡∏ô‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ Phomopsis": "Leaf spot and fruit rot from Phomopsis",\n'
    '  "‡πÇ‡∏£‡∏Ñ‡∏ú‡∏•‡πÄ‡∏ô‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ Lasiodiplodia": "Fruit rot from Lasiodiplodia",\n'
    '  "‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏î‡∏≥": "Sooty mold",\n'
    '  "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏ï‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ": "Rhizoctonia Leaf Fall, Rhizoctonia Leaf Blight",\n'
    '  "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏™‡∏≤‡∏´‡∏£‡πà‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏™‡∏ô‡∏¥‡∏°": "Algal Leaf Spot",\n'
    '  "‡πÇ‡∏£‡∏Ñ‡∏Å‡∏¥‡πà‡∏á‡πÅ‡∏´‡πâ‡∏á": "Die-back",\n'
    '  "‡∏´‡∏ô‡∏≠‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô": "Durian Seed Borer",\n'
    '  "‡∏´‡∏ô‡∏≠‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡∏ú‡∏•": "Yellow Peach Moth",\n'
    '  "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡πÑ‡∏Å‡πà‡πÅ‡∏à‡πâ‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô": "Durian Psyllid",\n'
    '  "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡πÑ‡∏ü‡∏û‡∏£‡∏¥‡∏Å": "Chili Thrips",\n'
    '  "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡πÅ‡∏õ‡πâ‡∏á": "Mealybugs",\n'
    '  "‡πÑ‡∏£‡πÅ‡∏î‡∏á‡πÅ‡∏≠‡∏ü‡∏£‡∏¥‡∏Å‡∏±‡∏ô": "African red mite",\n'
    '  "‡∏°‡∏≠‡∏î‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô": "Shot Hole Borer",\n'
    '  "‡∏≠‡∏≠‡∏Å‡∏î‡∏≠‡∏Å": "flowering",\n'
    '  "‡∏î‡∏≠‡∏Å‡∏ö‡∏≤‡∏ô": "blooming"\n'
    "}"
)

# Instruction template
user_prompt_template = """Translate the following Thai query to English:
{thai_query}
Provide an accurate English translation that preserves the original meaning and intent.  
Return the translation in text.
```"""


def translate(text: str, model: str, client: genai.Client) -> str:
    user_prompt = user_prompt_template.format(thai_query=text)
    try:
        response = client.models.generate_content(
            model=model,
            contents=[system_prompt, user_prompt],
            config=types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=-1),
            ),
        )
        return response.text
    except Exception as e:
        return f"[ERROR] {str(e)}"


def main():
    parser = argparse.ArgumentParser(
        description="Thai-to-English translation using Gemini"
    )
    parser.add_argument(
        "--input",
        type=str,
        required=True,
        help="Path to input JSON file",
    )
    parser.add_argument(
        "--output",
        type=str,
        help="Path to save output JSON file",
    )
    parser.add_argument(
        "--model",
        type=str,
        default="gemini-2.5-pro",
        help="Gemini model to use",
    )

    args = parser.parse_args()

    client = setup_gemini_client()

    with open(args.input, "r", encoding="utf-8") as f:
        data = json.load(f)

    for i, sample in enumerate(data):
        print(f"\nüîÑ Processing sample {i+1}/{len(data)}")
        t_start = time.time()
        prediction = translate(sample["thai"], model=args.model, client=client)
        t_end = time.time()

        sample["predict"] = prediction
        sample["time_second"] = round(t_end - t_start, 3)

        print(f"TH: {sample['thai']}")
        print(f"EN: {prediction}")
        print(f"‚è± Time: {sample['time_second']}s")

    out_path = args.output or f"dataset/{args.model.replace('/', '_')}.json"
    with open(out_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    print(f"\n‚úÖ Results saved to: {out_path}")


if __name__ == "__main__":
    main()
